{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"A complete segmentation approach for imaging mass cytometry data Measuring objects and their features in images is a basic step in many quantitative tissue image analysis workflows. This repository presents a flexible and scalable image processing pipeline tailored to highly multiplexed images facilitating the segmentation of single cells across hundreds of images. It is based on supervised pixel classification using Ilastik to distill segmentation relevant information from multiplexed images in a semi-supervised, automated fashion. This feature reduction step is followed by standard image segmentation using CellProfiler . The segmentation pipeline is accompanied by the helper python package imctools as well as customized CellProfiler modules , which facilitate the analysis of highly multiplexed images. The pipeline is entirely build on open source tool, can be easily adapted to more specific problems and forms a solid basis for quantitative multiplexed tissue image analysis. For a more detailed introduction, please refer to the Introduction . This site gives detailed explanations on the 5 step (A-E, see below ) pipeline to generate single-cell measurements from raw imageing data. Critical notes There are some points that need to be considered when using this pipeline: The input files need to be .zip folders that contain the .mcd files and .txt files (see the pre processing section ) It is recommended to acquire 5 or more channels to avoid potential downstream problems where images are considered to be of the RGBA type (red, green, blue, alpha). Documentation The guide displayed here gives detailed information on how to handle IMC images. For additiona information on CellProfiler , please refer to their manuals . Getting started For the main part of the analysis, you will need to install Ilastik and CellProfiler . The current setup is tested with Ilastik v1.3.5 and CellProfiler v4.0.6. Furthermore, before running the analysis, you will need to setup a conda environment: Install conda Clone the ImcSegmentationPipeline repository: git clone https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git Setup the conda environment: cd ImcSegmentationPipeline conda env create -f conda_imctools.yml Obtain the IMC-specific CellProfiler plugins by directly downloading them via: git submodule update --init --recursive Configure CellProfiler to use the plugins by opening the CellProfiler GUI, selecting Preferences and setting the CellProfiler plugins directory to PATHTO/ImcSegmentationPipeline/resources/cp_plugins/ImcPluginsCP/plugins Activate the environment created in .3 and start a jupyter instance conda activate ImcSegmentationPipeline jupyter notebook Image data types Throughout this pipeline, images in .tiff format are saved as unsigned 16-bit images with an intensity range of 0 - 65535 . For an overview on common image data types, please refer to the scikit-image documentation . A - Pre processing To work with the generated imaging data, they will first be converted into .ome.tiff , multi-channel .tiff and single-channel .tiff formats that are compatible with most imaging software. A key step of the pre-processing pipeline is also the selection of channels for (i) downstream cell measurements and (ii) ilastik pixel classification. Please follow the pre-processing guide for more information. B/C - Ilastik training D/E - CellProfiler image segmentation An overview of the full segmentation pipeline Contributors Vito Zanotelli Nils Eling Whoever wants to contribute Citation To come...","title":"Home"},{"location":"index.html#a-complete-segmentation-approach-for-imaging-mass-cytometry-data","text":"Measuring objects and their features in images is a basic step in many quantitative tissue image analysis workflows. This repository presents a flexible and scalable image processing pipeline tailored to highly multiplexed images facilitating the segmentation of single cells across hundreds of images. It is based on supervised pixel classification using Ilastik to distill segmentation relevant information from multiplexed images in a semi-supervised, automated fashion. This feature reduction step is followed by standard image segmentation using CellProfiler . The segmentation pipeline is accompanied by the helper python package imctools as well as customized CellProfiler modules , which facilitate the analysis of highly multiplexed images. The pipeline is entirely build on open source tool, can be easily adapted to more specific problems and forms a solid basis for quantitative multiplexed tissue image analysis. For a more detailed introduction, please refer to the Introduction . This site gives detailed explanations on the 5 step (A-E, see below ) pipeline to generate single-cell measurements from raw imageing data.","title":"A complete segmentation approach for imaging mass cytometry data"},{"location":"index.html#critical-notes","text":"There are some points that need to be considered when using this pipeline: The input files need to be .zip folders that contain the .mcd files and .txt files (see the pre processing section ) It is recommended to acquire 5 or more channels to avoid potential downstream problems where images are considered to be of the RGBA type (red, green, blue, alpha).","title":"Critical notes"},{"location":"index.html#documentation","text":"The guide displayed here gives detailed information on how to handle IMC images. For additiona information on CellProfiler , please refer to their manuals .","title":"Documentation"},{"location":"index.html#getting-started","text":"For the main part of the analysis, you will need to install Ilastik and CellProfiler . The current setup is tested with Ilastik v1.3.5 and CellProfiler v4.0.6. Furthermore, before running the analysis, you will need to setup a conda environment: Install conda Clone the ImcSegmentationPipeline repository: git clone https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git Setup the conda environment: cd ImcSegmentationPipeline conda env create -f conda_imctools.yml Obtain the IMC-specific CellProfiler plugins by directly downloading them via: git submodule update --init --recursive Configure CellProfiler to use the plugins by opening the CellProfiler GUI, selecting Preferences and setting the CellProfiler plugins directory to PATHTO/ImcSegmentationPipeline/resources/cp_plugins/ImcPluginsCP/plugins Activate the environment created in .3 and start a jupyter instance conda activate ImcSegmentationPipeline jupyter notebook","title":"Getting started"},{"location":"index.html#image-data-types","text":"Throughout this pipeline, images in .tiff format are saved as unsigned 16-bit images with an intensity range of 0 - 65535 . For an overview on common image data types, please refer to the scikit-image documentation .","title":"Image data types"},{"location":"index.html#a-pre-processing","text":"To work with the generated imaging data, they will first be converted into .ome.tiff , multi-channel .tiff and single-channel .tiff formats that are compatible with most imaging software. A key step of the pre-processing pipeline is also the selection of channels for (i) downstream cell measurements and (ii) ilastik pixel classification. Please follow the pre-processing guide for more information.","title":"A - Pre processing"},{"location":"index.html#bc-ilastik-training","text":"","title":"B/C - Ilastik training"},{"location":"index.html#de-cellprofiler-image-segmentation","text":"An overview of the full segmentation pipeline","title":"D/E - CellProfiler image segmentation"},{"location":"index.html#contributors","text":"Vito Zanotelli Nils Eling Whoever wants to contribute","title":"Contributors"},{"location":"index.html#citation","text":"To come...","title":"Citation"},{"location":"cellprofiler.html","text":"CellProfiler segmentation Cellprofiler: 2_segment_ilastik This step will segment the probabilities into masks. Things to adapt: 1) File list: choose again all files from the tiffs folder 2) It is important to check the IdentifyPrimaryObjects step, if the segmentation settings are suitable! This might vary strongly between cell/tissue/training and needs attention! Use the test mode and try various settings. Also note the smooth step immediately before: This can be also removed, I just happen get good results with this additional step. 3) Also the MeasureObjectSizeShape combined with FilterObjects is just some personal preference of mine, feel free to change 4) IdentifySecondaryObjects : Here th mask is expanded to the full cell. 5) Rescale objects : note that our segmentation was done on 2x upscaled images, this scales the masks down again. Note that potentially also the nuclei mask could be scaled down and further exported and used. 6) The Default Output Path does not need to be adapted for this module. Note1: Seperating mask generation from mask measurement adds modularity and is thus highly recommended, as generating masks is one of the most resource intensive steps. Cellprofiler: 3_measure_mask This step is not necessary for HistoCat only analysis. If HistoCat should be used, use the Generate the histocat folder with masks section below. 3_measure_mask_basic This module measures without considering spillover correction. 1) File list: choose again all files from the tiffs folder 2) View Output settings: set the Default output folder to the cpout folder and the Default input folder to the cpint folder. 3) Metadata: update - this will automatically merge the mcd metadata .csv generated earlier in the script with your images. 4) Names and types: click update 5) Measure Object Intensity Multichannel : Adapt the channel numbers. Check the _full.csv files in the tiffs folder to see how many channels the stack have and adapt accordingly. 6) Measure Image Intensity Multichannel : Adapt the channel numbers. Check the _full.csv files in the tiffs folder to see how many channels the stack have and adapt accordingly. Notes: - In this pipeline all the intesities are scaled by 1/(2**16) - The mapping between channel number c1, c2, c3 corresponds to the position in the _full.csv s found in the tiffs folder. - The original acquisition description, acquisition frequencies etc can be found in the Image.csv output as Metdata_... columns. - This outputs a lot of measurements that are acutally of little interest - usually we only look at meanintensity per channel and cell. To reduce the outputs, select in Export To Spreadsheet -> Select Measurements to Export -> Only the measurements you want (usually all Image measurements and only the MeanIntensity fullstack measurements). - The FullStack can also be not measured, as it is almost identical to the FullStackFiltered . 3_measure_mask_compensated This will also have a spillover corrections step - stay tuned!","title":"CellProfiler analysis"},{"location":"cellprofiler.html#cellprofiler-segmentation","text":"Cellprofiler: 2_segment_ilastik This step will segment the probabilities into masks. Things to adapt: 1) File list: choose again all files from the tiffs folder 2) It is important to check the IdentifyPrimaryObjects step, if the segmentation settings are suitable! This might vary strongly between cell/tissue/training and needs attention! Use the test mode and try various settings. Also note the smooth step immediately before: This can be also removed, I just happen get good results with this additional step. 3) Also the MeasureObjectSizeShape combined with FilterObjects is just some personal preference of mine, feel free to change 4) IdentifySecondaryObjects : Here th mask is expanded to the full cell. 5) Rescale objects : note that our segmentation was done on 2x upscaled images, this scales the masks down again. Note that potentially also the nuclei mask could be scaled down and further exported and used. 6) The Default Output Path does not need to be adapted for this module. Note1: Seperating mask generation from mask measurement adds modularity and is thus highly recommended, as generating masks is one of the most resource intensive steps.","title":"CellProfiler segmentation"},{"location":"cellprofiler.html#cellprofiler-3_measure_mask","text":"This step is not necessary for HistoCat only analysis. If HistoCat should be used, use the Generate the histocat folder with masks section below.","title":"Cellprofiler: 3_measure_mask"},{"location":"cellprofiler.html#3_measure_mask_basic","text":"This module measures without considering spillover correction. 1) File list: choose again all files from the tiffs folder 2) View Output settings: set the Default output folder to the cpout folder and the Default input folder to the cpint folder. 3) Metadata: update - this will automatically merge the mcd metadata .csv generated earlier in the script with your images. 4) Names and types: click update 5) Measure Object Intensity Multichannel : Adapt the channel numbers. Check the _full.csv files in the tiffs folder to see how many channels the stack have and adapt accordingly. 6) Measure Image Intensity Multichannel : Adapt the channel numbers. Check the _full.csv files in the tiffs folder to see how many channels the stack have and adapt accordingly. Notes: - In this pipeline all the intesities are scaled by 1/(2**16) - The mapping between channel number c1, c2, c3 corresponds to the position in the _full.csv s found in the tiffs folder. - The original acquisition description, acquisition frequencies etc can be found in the Image.csv output as Metdata_... columns. - This outputs a lot of measurements that are acutally of little interest - usually we only look at meanintensity per channel and cell. To reduce the outputs, select in Export To Spreadsheet -> Select Measurements to Export -> Only the measurements you want (usually all Image measurements and only the MeanIntensity fullstack measurements). - The FullStack can also be not measured, as it is almost identical to the FullStackFiltered .","title":"3_measure_mask_basic"},{"location":"cellprofiler.html#3_measure_mask_compensated","text":"This will also have a spillover corrections step - stay tuned!","title":"3_measure_mask_compensated"},{"location":"ilastik.html","text":"Ilastik pixel classification Prepare images for pixel classification This is a CellProfiler module In this module we prepare the data for Ilastik pixel classification, by first removing strong outlier pixels, then scaling the images 2x and then taking random 500x500 crops to do the train the pixel classifier. Note: for large datasets 250x250 crops or smaler should suffice! The following parts of this module need to be adapted: 1) File list: choose all files in the tiff subfolder 2) Click on default output settings and specify the Default input Default Output Folder: Choose the ilastik subfolder No further parts need to be adapted. In our 16 core computer this step takes ca 5 min for the example dataset. TODO: more detailed explanation what to do and what the steps are hot pixel removal Summarize stack: What, why and does it matter for the pixel-classification? Train a pixel classifier This uses the random crops generated in the last step. 1) Make a new pixel classification project . -> An example project that works with the example data can be found in the 'analysis' subfolder. 2) Add the .h5 random crops: Raw data -> Add Seperate Images -> Select all .h5 images in the ilastik subfolder. 3) Proceed to Feature Selection For a detailed overview on ilastik pixel classification refer to the manual . 4) Select suitable features (or just everything sigma >= 1 pixels) What do you mean? 5) Proceed to the classification: - Add 3 labels: - 1: Nuclei - 2: Cytoplasma/membrane - 3: Background - -> For large datasets adding the labels can take a while - Start labeling: - The box next to `Input Data` can change the channels. What each channel corresponds to can be seen when looking in any of the `..._ilastik.csv` files in the `tiff` folder. The 0 channel correspond to the sum of all channels, very usefull to label the background. - Use window leveling change the contrast. Right click on the `Input Data` -> `Adjust Thresholds` is also very usefull - Label opiniated: If you see in the nucleus channel that two nuclei are stuck together but have a faint dip in intensity in between, label this as 2: Cytoplasma. Encyrcle nuclei with Cytoplasma - Diseable `Live Update` for performance - Frequently check the `Uncertainties`: This indicates which pixels the classifier profits most if they are labeled. A well trained classifier has low uncertainty within class regions (e.g. Nuclei) and high uncertainty at class borders (e.g. between nuclei and cytoplasma). - If you think the classifier is well trained, export the probabilities: - Export Settings -> Source: Probabilities -> Choose Export Image Settings: - Convert to datatype: Unsigned Integer 16 bit - Renormalize: check - Format: Tiff - File: leave default - Export all: This generates `_Probabilities.tiff` in the `ilastik` folder. They can be checked using any image viewer - To generate uncertainty maps (good to identify regions that need training), run the `Convert probabilities to uncertainties` section `#For training` below. This will put uncertainties in the uncertainty folder. -> Well trained classifiers have low uncertainty (transparent) everywhere but at class borders which should be white. - Optional: Train again regions with high uncertainty, then proceed. - Batch processing: -> Select raw data files -> select all `_s2.h5` files in the `tiff` folder. (sort by filetype, select all `H5` files). -> This step takes a while and is computationally intensive! -> Ca 15 min on 10 cores on the example data - Optional: use the below probability to uncertainty `#For the data` to convert all proabilities to uncertainties, check if there are any regions of high uncertainty and optionally crop the corresponding image part in imagej and add it to the training data. - Note: store the `ilastik` folder with all the random crops and the trained classifier for reproducibility reasons. - A trained","title":"Ilastik training"},{"location":"ilastik.html#ilastik-pixel-classification","text":"","title":"Ilastik pixel classification"},{"location":"ilastik.html#prepare-images-for-pixel-classification","text":"This is a CellProfiler module In this module we prepare the data for Ilastik pixel classification, by first removing strong outlier pixels, then scaling the images 2x and then taking random 500x500 crops to do the train the pixel classifier. Note: for large datasets 250x250 crops or smaler should suffice! The following parts of this module need to be adapted: 1) File list: choose all files in the tiff subfolder 2) Click on default output settings and specify the Default input Default Output Folder: Choose the ilastik subfolder No further parts need to be adapted. In our 16 core computer this step takes ca 5 min for the example dataset. TODO: more detailed explanation what to do and what the steps are hot pixel removal Summarize stack: What, why and does it matter for the pixel-classification?","title":"Prepare images for pixel classification"},{"location":"ilastik.html#train-a-pixel-classifier","text":"This uses the random crops generated in the last step. 1) Make a new pixel classification project . -> An example project that works with the example data can be found in the 'analysis' subfolder. 2) Add the .h5 random crops: Raw data -> Add Seperate Images -> Select all .h5 images in the ilastik subfolder. 3) Proceed to Feature Selection For a detailed overview on ilastik pixel classification refer to the manual . 4) Select suitable features (or just everything sigma >= 1 pixels) What do you mean? 5) Proceed to the classification: - Add 3 labels: - 1: Nuclei - 2: Cytoplasma/membrane - 3: Background - -> For large datasets adding the labels can take a while - Start labeling: - The box next to `Input Data` can change the channels. What each channel corresponds to can be seen when looking in any of the `..._ilastik.csv` files in the `tiff` folder. The 0 channel correspond to the sum of all channels, very usefull to label the background. - Use window leveling change the contrast. Right click on the `Input Data` -> `Adjust Thresholds` is also very usefull - Label opiniated: If you see in the nucleus channel that two nuclei are stuck together but have a faint dip in intensity in between, label this as 2: Cytoplasma. Encyrcle nuclei with Cytoplasma - Diseable `Live Update` for performance - Frequently check the `Uncertainties`: This indicates which pixels the classifier profits most if they are labeled. A well trained classifier has low uncertainty within class regions (e.g. Nuclei) and high uncertainty at class borders (e.g. between nuclei and cytoplasma). - If you think the classifier is well trained, export the probabilities: - Export Settings -> Source: Probabilities -> Choose Export Image Settings: - Convert to datatype: Unsigned Integer 16 bit - Renormalize: check - Format: Tiff - File: leave default - Export all: This generates `_Probabilities.tiff` in the `ilastik` folder. They can be checked using any image viewer - To generate uncertainty maps (good to identify regions that need training), run the `Convert probabilities to uncertainties` section `#For training` below. This will put uncertainties in the uncertainty folder. -> Well trained classifiers have low uncertainty (transparent) everywhere but at class borders which should be white. - Optional: Train again regions with high uncertainty, then proceed. - Batch processing: -> Select raw data files -> select all `_s2.h5` files in the `tiff` folder. (sort by filetype, select all `H5` files). -> This step takes a while and is computationally intensive! -> Ca 15 min on 10 cores on the example data - Optional: use the below probability to uncertainty `#For the data` to convert all proabilities to uncertainties, check if there are any regions of high uncertainty and optionally crop the corresponding image part in imagej and add it to the training data. - Note: store the `ilastik` folder with all the random crops and the trained classifier for reproducibility reasons. - A trained","title":"Train a pixel classifier"},{"location":"intro.html","text":"Introduction","title":"Introduction"},{"location":"intro.html#introduction","text":"","title":"Introduction"},{"location":"output.html","text":"The output of the IMC segmentation pipeline Pipeline output The pipeline output is all in the cpout folder. Files and folders: - Image.csv: Image level metadata - var_Image.csv: Metadata for the colums in Image.csv. This contains also metadata from the IMC such as acquisition coordinates. {object}.csv: eg cell.csv, contains cell slice level measurements var_{object}.csv: eg var_cell.csv: contains metadata for the object measurements panel.csv: a copy of the panel used for the input Object relationships.csv: Object neighbourhood and other relationships Experiment.csv: Metadata about the actual measurement run (eg pipeline used,...) Note that the description image name can be found in the ..._Acquisition_meta.csv generated together with the ome tiffs as well as in the cpinp folder later in the script. After analysis the Image.csv metadata file generated in Cellprofiller will also contain the Description as well as other important metadata for each image, such as acquisition frequency, time, location etc.","title":"Output files"},{"location":"output.html#the-output-of-the-imc-segmentation-pipeline","text":"Pipeline output The pipeline output is all in the cpout folder. Files and folders: - Image.csv: Image level metadata - var_Image.csv: Metadata for the colums in Image.csv. This contains also metadata from the IMC such as acquisition coordinates. {object}.csv: eg cell.csv, contains cell slice level measurements var_{object}.csv: eg var_cell.csv: contains metadata for the object measurements panel.csv: a copy of the panel used for the input Object relationships.csv: Object neighbourhood and other relationships Experiment.csv: Metadata about the actual measurement run (eg pipeline used,...) Note that the description image name can be found in the ..._Acquisition_meta.csv generated together with the ome tiffs as well as in the cpinp folder later in the script. After analysis the Image.csv metadata file generated in Cellprofiller will also contain the Description as well as other important metadata for each image, such as acquisition frequency, time, location etc.","title":"The output of the IMC segmentation pipeline"},{"location":"prepro.html","text":"Pre-processing Conversion from raw .mcd files to .ome.tiff and .tiff files suitable for downstream analysis During the first step of the segmentation pipeline, raw imaging files need to be converted to file formats that can be read-in by external software (Fiji, R, python, histoCAT). Please follow the preprocessing.ipynb script to pre-process the raw data To get started, please refer to the instructions here . Input The zipped .mcd files The Hyperion Imaging System produces vendor controlled .mcd and .txt files in the following folder structure: . +-- XYZ_ROI_001_1.txt +-- XYZ_ROI_002_2.txt +-- XYZ_ROI_003_3.txt +-- XYZ.mcd where XYZ defines the filename and ROI_001 , ROI_002 , ROI_003 are names for the selected regions of interest (ROI). These can be sepcified in the Fluidigm software when selecting ROIs. The .mcd file contains the raw imaging data of all acquired ROIs while each .txt file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, we recommend to zip the folder and specify the location of all .zip files for preprocessing. The panel file The panel file (in .csv format) specifies the type of antibodies that were used in the experiment and all additional channels (e.g. metals used for counterstaining 1 ) that you want to include in downstream processing. Example entries to the panel file can look like this: Metal Tag Target full ilastik Dy161 Ecad 1 1 Dy162 CD45 1 0 Er166 CD3 1 1 Ru100 Counterstain 1 0 Usually there are more columns but the important ones in this case are Metal Tag , full and ilastik . The 1 in the full column specifies channels that should be written out to an image stack that will be later on used to extract features. Here, please specify all channels as 1 that you want to have included in the analysis. The 1 in the ilastik column indicates channels that will be used for Ilastik pixel classification therefore being used for image segmentation. During the pre-processing steps, you will need to specify the name of the panel column that contains the metal isotopes, the name of the column that contains the 1 or 0 entries for the channels to be analysed and the name of the column that indicates the channels used for Ilastik training as seen above. Naming conventions When going through the preprocessing script , you will notice the The pipeline relies on _ilastik as ilastik suffix. Conversion fom .mcd to .ome.tiff files In the first step of the segmentation pipeline, raw .mcd files are converted into an .ome.tiff format 2 . This serves the purpose to allow vendor independent downstream analysis and visualization of the images. For in-depth information of the .ome.tiff file format see here . Each .mcd file can contain multiple acquisitions. This means that multiple multi-channel .ome.tiff files per .mcd file are produced. The Fluor and Name of each channel is set. Here Name contains the actual name of the antibody as defined in the panel file and Fluor contains the metal tag of the antibody. For IMC data, the metal tag is defined as: (IsotopeShortname)(Mass) , e.g. Ir191 for Iridium isotope 191. To perform this conversion, we use the mcdfolder_to_imcfolder converter function of the imctools package. It uses the xtiff python package to write the .ome.tiff files. The output folder for each sample has the following form: . +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_p1_pano.png +-- XYZ_s0_slide.png +-- XYZ_schema.xml +-- XYZ_session.json TODO: Explain what these files and what the nameing is Link to wiki of imctools . Conversion from .ome.tiff to single-channel tiffs We also export the images in a format that is supported by the histoCAT software 3 . To load images into histoCAT , they need to be stored as unsigned 16-bit or unsigned 32-bit single-channel .tiff files. For each acquisition (each .ome.tiff file), the ome2histocat converter exports one folder containing all measured channels as single-channel .tiff files. The naming convention of these .tiff files is Name_Fluor , where Name is the name of the antibody (or the metal if no name is available) and Fluor is the name of the metal isotope. For full documentation on the histoCAT format, please follow the manual . Conversion from .ome.tiff to multi-channel tiffs 2.4 Generation of the analysis stacks In the next step the converted .ome.tiff files are converted in a stack format suitable for further analysis, e.g. using CellPro\u001cler. In a basic pipeline two stacks will be prepared: a 'Full' stack, containing all the channels chosen for CellProfiler quantification as well as the 'Ilastik' stack, containing all the channels selected for the Ilastik pixel classification. It is straight forward to modify this step to generate additional stacks, e.g. for additional tissue structure segmentations. Export of acquisition-specific metadata Output Summarize output Catena R. et al. (2018) Ruthenium counterstaining for imaging mass cytometry. The Journal of Pathology 244(4), pages 479-484. \u21a9 Goldberg I.G. et al. (2005) The open microscopy environment (OME) data model and XML file: open tools for informatics and quantitative analysis in biological imaging. Genome Biology 6(5), R47. \u21a9 Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods 14, pages 873\u2013876. \u21a9","title":"Pre-processing"},{"location":"prepro.html#pre-processing","text":"Conversion from raw .mcd files to .ome.tiff and .tiff files suitable for downstream analysis During the first step of the segmentation pipeline, raw imaging files need to be converted to file formats that can be read-in by external software (Fiji, R, python, histoCAT). Please follow the preprocessing.ipynb script to pre-process the raw data To get started, please refer to the instructions here .","title":"Pre-processing"},{"location":"prepro.html#input","text":"The zipped .mcd files The Hyperion Imaging System produces vendor controlled .mcd and .txt files in the following folder structure: . +-- XYZ_ROI_001_1.txt +-- XYZ_ROI_002_2.txt +-- XYZ_ROI_003_3.txt +-- XYZ.mcd where XYZ defines the filename and ROI_001 , ROI_002 , ROI_003 are names for the selected regions of interest (ROI). These can be sepcified in the Fluidigm software when selecting ROIs. The .mcd file contains the raw imaging data of all acquired ROIs while each .txt file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, we recommend to zip the folder and specify the location of all .zip files for preprocessing. The panel file The panel file (in .csv format) specifies the type of antibodies that were used in the experiment and all additional channels (e.g. metals used for counterstaining 1 ) that you want to include in downstream processing. Example entries to the panel file can look like this: Metal Tag Target full ilastik Dy161 Ecad 1 1 Dy162 CD45 1 0 Er166 CD3 1 1 Ru100 Counterstain 1 0 Usually there are more columns but the important ones in this case are Metal Tag , full and ilastik . The 1 in the full column specifies channels that should be written out to an image stack that will be later on used to extract features. Here, please specify all channels as 1 that you want to have included in the analysis. The 1 in the ilastik column indicates channels that will be used for Ilastik pixel classification therefore being used for image segmentation. During the pre-processing steps, you will need to specify the name of the panel column that contains the metal isotopes, the name of the column that contains the 1 or 0 entries for the channels to be analysed and the name of the column that indicates the channels used for Ilastik training as seen above. Naming conventions When going through the preprocessing script , you will notice the The pipeline relies on _ilastik as ilastik suffix.","title":"Input"},{"location":"prepro.html#conversion-fom-mcd-to-ometiff-files","text":"In the first step of the segmentation pipeline, raw .mcd files are converted into an .ome.tiff format 2 . This serves the purpose to allow vendor independent downstream analysis and visualization of the images. For in-depth information of the .ome.tiff file format see here . Each .mcd file can contain multiple acquisitions. This means that multiple multi-channel .ome.tiff files per .mcd file are produced. The Fluor and Name of each channel is set. Here Name contains the actual name of the antibody as defined in the panel file and Fluor contains the metal tag of the antibody. For IMC data, the metal tag is defined as: (IsotopeShortname)(Mass) , e.g. Ir191 for Iridium isotope 191. To perform this conversion, we use the mcdfolder_to_imcfolder converter function of the imctools package. It uses the xtiff python package to write the .ome.tiff files. The output folder for each sample has the following form: . +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_ac1_ac.ome.tiff +-- XYZ_s0_p1_pano.png +-- XYZ_s0_slide.png +-- XYZ_schema.xml +-- XYZ_session.json TODO: Explain what these files and what the nameing is Link to wiki of imctools .","title":"Conversion fom .mcd to .ome.tiff files"},{"location":"prepro.html#conversion-from-ometiff-to-single-channel-tiffs","text":"We also export the images in a format that is supported by the histoCAT software 3 . To load images into histoCAT , they need to be stored as unsigned 16-bit or unsigned 32-bit single-channel .tiff files. For each acquisition (each .ome.tiff file), the ome2histocat converter exports one folder containing all measured channels as single-channel .tiff files. The naming convention of these .tiff files is Name_Fluor , where Name is the name of the antibody (or the metal if no name is available) and Fluor is the name of the metal isotope. For full documentation on the histoCAT format, please follow the manual .","title":"Conversion from .ome.tiff to single-channel tiffs"},{"location":"prepro.html#conversion-from-ometiff-to-multi-channel-tiffs","text":"2.4 Generation of the analysis stacks In the next step the converted .ome.tiff files are converted in a stack format suitable for further analysis, e.g. using CellPro\u001cler. In a basic pipeline two stacks will be prepared: a 'Full' stack, containing all the channels chosen for CellProfiler quantification as well as the 'Ilastik' stack, containing all the channels selected for the Ilastik pixel classification. It is straight forward to modify this step to generate additional stacks, e.g. for additional tissue structure segmentations.","title":"Conversion from .ome.tiff to multi-channel tiffs"},{"location":"prepro.html#export-of-acquisition-specific-metadata","text":"","title":"Export of acquisition-specific metadata"},{"location":"prepro.html#output","text":"Summarize output Catena R. et al. (2018) Ruthenium counterstaining for imaging mass cytometry. The Journal of Pathology 244(4), pages 479-484. \u21a9 Goldberg I.G. et al. (2005) The open microscopy environment (OME) data model and XML file: open tools for informatics and quantitative analysis in biological imaging. Genome Biology 6(5), R47. \u21a9 Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods 14, pages 873\u2013876. \u21a9","title":"Output"}]}